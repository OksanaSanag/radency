{"version":3,"sources":["component/FileParser.js","assets/doColumns.js","component/Table.js","App.js","reportWebVitals.js","index.js"],"names":["FileParser","props","onDrop","dat","console","log","arrDataFromDropFile","map","i","data","setArr","onError","err","file","inputElem","reason","addRemoveButton","removeButtonColor","config","header","onRemoveFile","style","dropArea","borderColor","color","borderRadius","margin","dropAreaActive","dropFile","width","height","background","fileSizeInfo","lineHeight","fileNameInfo","fontSize","progressBar","backgroundColor","marginBottom","arr","dataForTable","dataFieldsOfColumns","Object","keys","dataField","text","this","Table","length","columns","doColumns","keyField","striped","hover","App","useState","arrData","setArrData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAkEeA,MA/Df,SAAoBC,GAkBlB,OACI,cAAC,IAAD,CACIC,OAlBa,SAACC,GAChBC,QAAQC,IAAI,UAAWF,GACzB,IAAMG,EAAsBH,EAAII,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QACzCL,QAAQC,IAAI,sBAAuBC,GACrCL,EAAMS,OAAOJ,IAeTK,QAZgB,SAACC,EAAKC,EAAMC,EAAWC,GAC3CX,QAAQC,IAAIO,IAYRI,iBAAe,EACfC,kBAAkB,UAClBC,OAAQ,CAACC,QAAQ,GACjBC,aAZqB,SAACX,GAC1BL,QAAQC,IAAI,+BACZD,QAAQC,IAAII,GACZL,QAAQC,IAAI,gCAURgB,MAAO,CACHC,SAAU,CACVC,YAAa,QACbC,MAAO,QACPC,aAAc,QACdC,OAAQ,OAERC,eAAgB,CAChBJ,YAAa,OAEbK,SAAU,CACVC,MAAO,IACPC,OAAQ,GACRC,WAAY,OACZN,aAAc,SAEdO,aAAc,CACdR,MAAO,QACPS,WAAY,EACZP,OAAQ,SAERQ,aAAc,CACdV,MAAO,QACPW,SAAU,GACVT,OAAQ,SAERU,YAAa,CACbC,gBAAiB,QACjBC,aAAc,UAnCtB,SAuCI,6E,iBC5DK,WAACC,GACZ,IAAMC,EAAeD,EACfE,EAAsBC,OAAOC,KAAKH,EAAa,IAYrD,OAXApC,QAAQC,IAAI,sBAAuBoC,GAEnBA,EAAoBlC,KAAK,SAAAC,GAMrC,OADAJ,QAAQC,IAAI,MAAOG,GACZ,IALP,SAAaoC,EAAWC,GACpBC,KAAKF,UAAYA,EACjBE,KAAKD,KAAOA,EAGT,CAAQrC,EAAGA,OCiBXuC,MAzBf,SAAe9C,GAASG,QAAQC,IAAI,UAAWJ,GAAzB,IACXuC,EAAgBvC,EAAhBuC,aAEP,GAF8BpC,QAAQC,IAAI,QAASmC,GAEvB,IAAxBA,EAAaQ,OAAc,OAAS,gDAExC,IAAMC,EAAUC,EAAUV,GAK1B,OAHApC,QAAQC,IAAI,eAAgBmC,GAC5BpC,QAAQC,IAAI,UAAW4C,GACvB7C,QAAQC,IAAI,0BAA2B6C,EAAUV,IAE7C,qCACA,8CACA,cAAC,IAAD,CACIW,SAAS,QACT1C,KAAO+B,EACPS,QAAUA,EACVG,SAAO,EACPC,OAAK,Q,OCLFC,MAZf,SAAarD,GAAQ,IAAD,EACWsD,mBAAS,IADpB,mBACXC,EADW,KACFC,EADE,KAIlB,OADArD,QAAQC,IAAImD,GAEV,gCACE,cAAC,EAAD,CAAY9C,OAJI,SAAC8C,GAAD,OAAaC,EAAWD,MAKxC,cAAC,EAAD,CAAOhB,aAAiBgB,QCAfE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.21f4d917.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CSVReader } from 'react-papaparse';\r\n\r\nfunction FileParser(props) {\r\n\r\n  const handleOnDrop = (dat) => {\r\n        console.log('DATA my', dat );\r\n      const arrDataFromDropFile = dat.map(i => i.data); \r\n        console.log('arrDataFromDropFile', arrDataFromDropFile);\r\n      props.setArr(arrDataFromDropFile); \r\n  }\r\n\r\n    const handleOnError = (err, file, inputElem, reason) => {\r\n      console.log(err)\r\n    }\r\n  \r\n    const handleOnRemoveFile = (data) => {\r\n      console.log('---------------------------')\r\n      console.log(data)\r\n      console.log('---------------------------')\r\n    }\r\n  return (\r\n      <CSVReader\r\n          onDrop={handleOnDrop}\r\n          onError={handleOnError}\r\n          addRemoveButton\r\n          removeButtonColor='#659cef'\r\n          config={{header: true}}\r\n          onRemoveFile={handleOnRemoveFile}\r\n          style={{\r\n              dropArea: {\r\n              borderColor: 'green',\r\n              color: 'green',\r\n              borderRadius: '0.2em',\r\n              margin: '1em',\r\n              },\r\n              dropAreaActive: {\r\n              borderColor: 'red',\r\n              },\r\n              dropFile: {\r\n              width: 200,\r\n              height: 70,\r\n              background: '#ccc',\r\n              borderRadius: '0.2em',\r\n              },\r\n              fileSizeInfo: {\r\n              color: 'green',\r\n              lineHeight: 1,\r\n              margin: '0.6em',\r\n              },\r\n              fileNameInfo: {\r\n              color: 'green',\r\n              fontSize: 14,\r\n              margin: '0.6em'\r\n              },\r\n              progressBar: {\r\n              backgroundColor: 'green',\r\n              marginBottom: '0.9em'\r\n              },\r\n          }}   \r\n      >\r\n          <span>Drop CSV file here or click to upload.</span>\r\n      </CSVReader>\r\n  )\r\n};\r\n\r\nexport default FileParser;","\r\nexport default (arr) => {\r\n    const dataForTable = arr;\r\n    const dataFieldsOfColumns = Object.keys(dataForTable[1]); //масив назв полів\r\n    console.log('dataFieldsOfColumns', dataFieldsOfColumns);\r\n\r\n    const columns = dataFieldsOfColumns.map( i => { \r\n        function Obj(dataField, text) {\r\n            this.dataField = dataField;\r\n            this.text = text;\r\n        }; \r\n        console.log('III', i);\r\n        return new Obj(i, i);\r\n        }\r\n    );\r\n    return columns;\r\n};\r\n\r\n","import React from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport doColumns from  '../assets/doColumns';\r\n\r\nfunction Table(props) { console.log('MYprops', props);\r\n    const {dataForTable} = props; console.log('MYarr', dataForTable);\r\n\r\n    if (dataForTable.length === 0) return ( <div> Empty table </div>) \r\n         \r\n    const columns = doColumns(dataForTable); \r\n        \r\n    console.log('dataForTable', dataForTable); \r\n    console.log('columns', columns); \r\n    console.log('doColumns(dataForTable)', doColumns(dataForTable)); \r\n    return (\r\n        <>\r\n        <div> shopopalo </div>\r\n        <BootstrapTable \r\n            keyField='email' \r\n            data={ dataForTable } \r\n            columns={ columns }\r\n            striped\r\n            hover \r\n        />\r\n        </>\r\n    )\r\n       \r\n};\r\n\r\nexport default Table;\r\n\r\n    // const columns = [\r\n    //     {dataField:'Full Name', text:'Full Name'},\r\n    //     {dataField:'Phone', text:'Phone'},\r\n    //     {dataField:'Email', text:'Email'},\r\n    //     {dataField:'Age', text:'Age'},\r\n    //     {dataField:'Experience', text:'Experience'},\r\n    //     {dataField:'Yearly Income', text:'Yearly Income'},\r\n    //     {dataField:'Has children', text:'Has children'},\r\n    //     {dataField:'License states', text:'License states'},\r\n    //     {dataField:'Expiration date', text:'Expiration date'},\r\n    //     {dataField:'License number', text:'License number'},\r\n    // ]","import React, {useState} from 'react';\nimport FileParser from './component/FileParser';\nimport Table from './component/Table';\nimport './App.css';\n\nfunction App(props) {\n  const [arrData, setArrData]= useState([]);\n  const _setArrData = (arrData) => setArrData(arrData); \n  console.log(arrData);\n  return (\n    <div>\n      <FileParser setArr = { _setArrData } />\n      <Table dataForTable = { arrData } />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}